#library "enemyhb"
#include "zcommon.acs"
#import "defines.acs"
#import "function.acs"
#import "enemynm.acs"

//===========================================================================
//
// Functions
//
//===========================================================================

Function void DrawEnemyDamageTaken (Int DamagedActorTID, Int DamageTaken)
{
	// New stuff
	If (GetCVar ("hud_drawdamagenumbers") && !(CheckClass("DamNum"))) // DamNum is from Xaser's damage number mod. Use that one instead if it is loaded
	{
		Int NumberSpawnHeight = GetActorProperty (0, APROP_Height) + GetActorZ(0) + 2;
		If (ClassifyActor (0) & Actor_Dead) NumberSpawnHeight = (GetActorProperty (0, APROP_Height) * 4) + GetActorZ(0) + 2;
		Int Num_Digits = 0;
		Str Digit_Values[Max_Digits] = {"0", "0", "0", "0", "0"};
		Str DigitNum_Values[10] = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"};
		If (DamageTaken >= 1) Num_Digits++;
		If (DamageTaken >= 10) Num_Digits++;
		If (DamageTaken >= 100) Num_Digits++;
		If (DamageTaken >= 1000) Num_Digits++;
		If (DamageTaken >= 10000) Num_Digits++;
		If (DamageTaken > Max_DamageTaken) DamageTaken = Max_DamageTaken; // Don't exceed 99999
		
		For (Int place = 0; place < Num_Digits; place++)
		{
			// Pow (Int x, Int n)
			Int p = Pow (10, place);
			Int Num_Value = (DamageTaken / p) % 10;
			Digit_Values[Max_Digits - 1 - place] = DigitNum_Values[Num_Value];
		}
		
		
		
		// For spawning the right class
		Str ActorClassPrefix = "JPHUD_DamageNumber_";
		Str NumDigitsClassPrefix = "X";
		// Num_Digits
		Str DigitPlaceClassPrefix = "D";
		// For (Int place = 0; place < Num_Digits; place++)
		Str NumberValueClassPrefix = "N";
		// Digit_Values
		For (Int decplace = 0; decplace < Num_Digits; decplace++)
		{
			Str DamageNumberClass = StrParam (s:ActorClassPrefix, s:NumDigitsClassPrefix, i:Num_Digits, s:DigitPlaceClassPrefix, i:decplace+1, s:NumberValueClassPrefix, s:Digit_Values[Max_Digits - 1 - decplace]);
			If (CheckClass (DamageNumberClass))
			{
				SpawnForced (DamageNumberClass, GetActorX (0), GetActorY (0), NumberSpawnHeight, 0, GetActorAngle (0));
			}
		}
	}
}

//===========================================================================
//
// Scripts
//
//===========================================================================

Script "JP_HUD_Open" Open
{
	SpawnForced ("JPHUD_Start", 0, 0, 0);
}

Script "JP_HUD_PrintDamage" (Int DamageTaken)
{
	Int OriginalTID = ActivatorTID ();
	Int DamagedActorTID = GetActivatorTID();
	DrawEnemyDamageTaken (DamagedActorTID, DamageTaken);
	Thing_ChangeTID (0, OriginalTID);
}

// These 3 scripts are to insure that the enemy health bar is drawn

Script "JP_HUD_HPBar_Enter" Enter
{
	ACS_NamedExecuteAlways ("JP_HUD_EnemyHealthBar", 0, GetPlayerID(), 0, 0);
}

Script "JP_HUD_HPBar_Respawn" Respawn
{
	ACS_NamedExecuteAlways ("JP_HUD_EnemyHealthBar", 0, GetPlayerID(), 0, 0);
}

Script "JP_HUD_HPBar_Return" Return
{
	ACS_NamedExecuteAlways ("JP_HUD_EnemyHealthBar", 0, GetPlayerID(), 0, 0);
}

// Gets the player's target, then gets the needed values for displaying the graphics
Script "JP_HUD_EnemyHealthBar" (Int ActivatorID, Int Target_MaxHealth, Int Target_CurrentHealth)
{
	If (!(CheckClass("NCH_EnemyHealth"))) // NC Hud will draw it's own health bar
	{
		// Get the player's TID
		if ((ActivatorTID() == 0) || ThingCount (T_None, ActivatorTID()) > 1)
			Thing_ChangeTID (0, UniqueTID());
		if ((ActivatorTID() != Player_TID [PlayerNumber()]))
			GetPlayerID ();
	
		// Enemy health bar stuff
		ActivatorID = GetPlayerID();
		if ((GetUserCVar(PlayerNumber(), "hud_enemyhealthbar")) > 0)
		{
			Int Saved_TID = PickActor (ActivatorID, GetActorAngle (ActivatorID), GetActorPitch (ActivatorID), 8192.0, 0, MF_SHOOTABLE, ML_BLOCKEVERYTHING, PICKAF_RETURNTID);
			Int Temporary_TID = UniqueTID ();
			
			
			if (PickActor (ActivatorID, GetActorAngle (ActivatorID), GetActorPitch (ActivatorID), 8192.0, Temporary_TID, MF_SHOOTABLE, ML_BLOCKEVERYTHING, PICKAF_FORCETID))
			{
				SetActivator(Temporary_TID);
				Bool Target_Visible = !CheckActorProperty(0, APROP_RenderStyle, STYLE_None);
				Bool Target_Vulnerable = (!(CheckFlag(0, "NoDamage") || CheckFlag(0, "Invulnerable")));				
				if ((ClassifyActor(0) & ACTOR_MONSTER) && (ClassifyActor(0) & ACTOR_ALIVE) && Target_Visible ) // Monsters
				{
					Str Monster_FullName = GetEnemyName(GetActorProperty(0, APROP_NameTag));
					//Target_MaxHealth = GetActorProperty (0, AProp_SpawnHealth);
					Target_MaxHealth = CheckInventory ("JPHUD_MaxHealth");
					//Target_CurrentHealth = GetActorProperty (0, AProp_Health);
					Target_CurrentHealth = CheckInventory ("JPHUD_CurrentHealth");
					//If (Target_CurrentHealth > Target_MaxHealth) Target_MaxHealth = Target_CurrentHealth;
					if (ActivatorID != ActivatorTID())
					{
						SetActivator(ActivatorID);
						If (CheckSight (Temporary_TID, ActivatorID, 0))
							DrawEnemyHealthBar(Target_CurrentHealth, Target_MaxHealth, Monster_FullName, Target_Vulnerable); // I didn't want to make a huge mess here, so I made a function for it
						Thing_ChangeTID (Temporary_TID, Saved_TID);
					}
				}
				else if ((ClassifyActor(0) & ACTOR_PLAYER && ClassifyActor(0) & ACTOR_ALIVE) && (CheckFlag(0, "Shootable")) && Target_Visible && (!(CheckInventory("JPHUD_DontShowHealth")))) // Players/bots
				{
					Str Player_Name = GetCVarString ("Name");
					Target_MaxHealth = GetActorProperty (0, AProp_SpawnHealth);
					Target_CurrentHealth = GetActorProperty (0, AProp_Health);
					
					// hacks to work around player health
					// apparently players have a default max health of 0
					if (Target_MaxHealth == 0)
					{
						if (Target_CurrentHealth > 100)
							Target_MaxHealth = Target_CurrentHealth;
						else
							Target_MaxHealth = 100;
					}
					SetActivator(ActivatorID);
					If (CheckSight (Temporary_TID, ActivatorID, 0))
						DrawEnemyHealthBar(Target_CurrentHealth, Target_MaxHealth, Player_Name, Target_Vulnerable); // This will only show up if the player is an enemy
					Thing_ChangeTID (Temporary_TID, Saved_TID);
				}
				else
				{
				SetActivator (ActivatorID);
				}
			Delay (1);
			}
			else
			{
				SetActivator (ActivatorID);
			}
			Thing_ChangeTID (Temporary_TID, Saved_TID);
		}
	}
	Delay (1);
	Restart;
}